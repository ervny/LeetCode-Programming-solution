**********Problem**********
Leetcode number:783
Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.

Example :

Input: root = [4,2,6,1,3,null,null]
Output: 1
Explanation:
Note that root is a TreeNode object, not an array.

The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

          4
        /   \
      2      6
     / \    
    1   3  

while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node
**********Solution**********
class Solution {
    public int minDiffInBST(TreeNode root) {
        
        if(root==null)
            return 0;
        ArrayList<Integer> al=new ArrayList<>();
        al=helper(root,al);
        int arr[]=new int[al.size()-1];
        int min=Integer.MAX_VALUE;
        for(int i=0;i<al.size()-1;i++)
        {
            arr[i]=al.get(i+1)-al.get(i);
        }
        for(int i=0;i<arr.length;i++)
            if(min>arr[i])
                min=arr[i];
        
        
        return min;
        
    }
    public ArrayList helper(TreeNode root, ArrayList<Integer> al)
    {
        if(root==null)
            return al;
        helper(root.left, al);
        al.add(root.val);
        helper(root.right, al);
        return al;
    }
}
