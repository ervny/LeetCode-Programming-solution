**********Problem**********
Leetcode number:230
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note:
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3

**********Solution**********

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        
        if(root==null)
            return -1;
        ArrayList<Integer> al=new ArrayList<>();
        al=helper(root,al);
        return al.get(k-1);
        
    }
    public ArrayList helper(TreeNode root, ArrayList<Integer> al)
    {
        if(root==null)
            return al;
        helper(root.left,al);
        al.add(root.val);
        helper(root.right,al);
        return al;
    }
}
