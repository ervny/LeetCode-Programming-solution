**********Problem**********
LeetCode number:876
Given a non-empty, singly linked list with head node head, return a middle node of linked list.

If there are two middle nodes, return the second middle node.
Example 1:

Input: [1,2,3,4,5]
Output: Node 3 from this list (Serialization: [3,4,5])
The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).
Note that we returned a ListNode object ans, such that:
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.

**********Solution**********
class Solution {
    public ListNode middleNode(ListNode head) {
        if(head==null)
            return null;
        ListNode fast_ptr=head;
        ListNode slow_ptr=head;
        while(fast_ptr!=null && fast_ptr.next!=null)
        {
            fast_ptr=fast_ptr.next.next;
            slow_ptr=slow_ptr.next;
        }
        return slow_ptr;
        
    }
}
